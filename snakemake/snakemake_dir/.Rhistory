write.csv(df_results_binded,file = paste(wd,"saar_sigp_aa_on_l_position.csv") )
changes_all=c("");
for (i in seq(2,length(data[,1]))) {
dane=s2c(as.character(data[i,2]));
dane.1=s2c(as.character(data[i,4]));
change_all=dane.1[which(dane==saar)];
changes_all=append(changes_all,change_all);
}
all_changes_table_percentage=round((sort(table(changes_all))/length(changes_all)*100),2);
all_changes_table=(sort(table(changes_all)))
df_all_results_percentage = as.data.frame(all_changes_table_percentage)
df_all_results = as.data.frame(all_changes_table)
df_all_results_binded = cbind(df_all_results,df_all_results_percentage)
write.csv(df_all_results_binded,file = paste(wd,"aa_on_l_position.csv") )
wd
saar=args[2];
require(seqinr);
data=read.csv(args[1],sep=",",header=FALSE);
changes=c("");
for (i in seq(1,length(data[,1]))) {
dane=(as.character(data[i,2]));
dane.1=s2c(as.character(data[i,4]));
index=grepRaw(c2s(rep(saar,5)),(dane));#lrun position
if (length(index)!=0) {
a=rle(s2c(dane));
length=a$lengths[which(a$values==saar)][which.max(a$lengths[which(a$values==saar)])]#Lrun length
change=dane.1[index:(index+length-1)];
changes=append(changes,change);
}}
changes_table_percentage=round((sort(table(changes))/length(changes)*100),2);
changes_table=sort(table(changes));
df_results_percentage = as.data.frame(changes_table_percentage)
df_results = as.data.frame(changes_table)
df_results_binded = cbind(df_all_results,df_all_results_percentage)
write.csv(df_results_binded,file = paste(wd,"saar_sigp_aa_on_l_position.csv",sep = "/"))
changes_all=c("");
for (i in seq(2,length(data[,1]))) {
dane=s2c(as.character(data[i,2]));
dane.1=s2c(as.character(data[i,4]));
change_all=dane.1[which(dane==saar)];
changes_all=append(changes_all,change_all);
}
all_changes_table_percentage=round((sort(table(changes_all))/length(changes_all)*100),2);
all_changes_table=(sort(table(changes_all)))
df_all_results_percentage = as.data.frame(all_changes_table_percentage)
df_all_results = as.data.frame(all_changes_table)
df_all_results_binded = cbind(df_all_results,df_all_results_percentage)
write.csv(df_all_results_binded,file = paste(wd,"aa_on_l_position.csv",sep = "/"))
saar=args[2];
require(seqinr);
data=read.csv(args[1],sep=",",header=FALSE);
changes=c("");
for (i in seq(1,length(data[,1]))) {
dane=(as.character(data[i,2]));
dane.1=s2c(as.character(data[i,4]));
index=grepRaw(c2s(rep(saar,5)),(dane));#lrun position
if (length(index)!=0) {
a=rle(s2c(dane));
length=a$lengths[which(a$values==saar)][which.max(a$lengths[which(a$values==saar)])]#Lrun length
change=dane.1[index:(index+length-1)];
changes=append(changes,change);
}}
changes_table_percentage=round((sort(table(changes))/length(changes)*100),2);
changes_table=sort(table(changes));
df_results_percentage = as.data.frame(changes_table_percentage)
df_results = as.data.frame(changes_table)
df_results_binded = cbind(df_all_results,df_all_results_percentage)
write.csv(df_results_binded,file = paste(wd,"saar_sigp_aa_on_l_position.csv",sep = "/"),row.names = F)
changes_all=c("");
for (i in seq(2,length(data[,1]))) {
dane=s2c(as.character(data[i,2]));
dane.1=s2c(as.character(data[i,4]));
change_all=dane.1[which(dane==saar)];
changes_all=append(changes_all,change_all);
}
all_changes_table_percentage=round((sort(table(changes_all))/length(changes_all)*100),2);
all_changes_table=(sort(table(changes_all)))
df_all_results_percentage = as.data.frame(all_changes_table_percentage)
df_all_results = as.data.frame(all_changes_table)
df_all_results_binded = cbind(df_all_results,df_all_results_percentage)
write.csv(df_all_results_binded,file = paste(wd,"aa_on_l_position.csv",sep = "/"),row.names = F)
args = c("frog_1.txt" ,"frog_2.txt" ,"frog12.txt")
args = c("frog_1.txt" ,"frog_2.txt" ,"frog12.txt")
print("Reading files.")
file = read.csv(paste(paste(wd,"/",sep = ""),args[1],sep=""),sep = "\t",header = T);
file_1 = read.csv(paste(paste(wd,"/",sep = ""),args[2],sep = ""),sep = "\t",header = T);
print("Files read.")
file = as.matrix(file);
file_1 = as.matrix(file_1);
A = file[which(!duplicated(file[,1])),1]; # find non duplicated IDs in 1st column of the larger file
file=file[which(!duplicated(file[,1])),]; # leave only these rows
indices = c();
print("Identifying unique rows.")
for (i in seq(1, length(A),1)){
indices = append(indices,which(file_1[,1] == A[i])[1]) # which rows of the other file are these?
}
print("Unique rows identified.")
file_1 = file_1[indices,] # leave only these rows in smaller file
if(any(!(file_1[,1] == file[,1]))){
print("Mismatch encountered!");
stop()
}; # check for any mismatches
to_merge = file_1[,-1]; # leave first column (already in the larger file)
merged = cbind2(file, to_merge) # merge 'em
write.table(merged,file = paste(paste(wd,"/",sep = ""),args[3],sep=""),sep = "\t",row.names = F);
args = c("frog_1.txt" ,"frog_2.txt" ,"frog12.txt")
print("Reading files.")
file = read.csv(paste(paste(wd,"/",sep = ""),args[1],sep=""),sep = "\t",header = T);
wd = getwd()
print("Reading files.")
file = read.csv(paste(paste(wd,"/",sep = ""),args[1],sep=""),sep = "\t",header = T);
file_1 = read.csv(paste(paste(wd,"/",sep = ""),args[2],sep = ""),sep = "\t",header = T);
print("Files read.")
file = as.matrix(file);
file_1 = as.matrix(file_1);
A = file[which(!duplicated(file[,1])),1]; # find non duplicated IDs in 1st column of the larger file
file=file[which(!duplicated(file[,1])),]; # leave only these rows
indices = c();
print("Identifying unique rows.")
for (i in seq(1, length(A),1)){
indices = append(indices,which(file_1[,1] == A[i])[1]) # which rows of the other file are these?
}
print("Unique rows identified.")
file_1 = file_1[indices,] # leave only these rows in smaller file
if(any(!(file_1[,1] == file[,1]))){
print("Mismatch encountered!");
stop()
}; # check for any mismatches
to_merge = file_1[,-1]; # leave first column (already in the larger file)
merged = cbind2(file, to_merge) # merge 'em
write.table(merged,file = paste(paste(wd,"/",sep = ""),args[3],sep=""),sep = "\t",row.names = F);
file = read.csv(paste(paste(wd,"/",sep = ""),args[1],sep=""),sep = "\t",header = T);
args = c("frog_1.txt" ,"frog_2.txt" ,"frog12.txt")
wd = getwd()
file = read.csv(paste(paste(wd,"/",sep = ""),args[1],sep=""),sep = "\t",header = T);
wd="/home/mstolarczyk/Uczelnia/MGR/praca_magisterska/nowe_dane/mappers_nowe_podejscie"
print("Reading files.")
file = read.csv(paste(paste(wd,"/",sep = ""),args[1],sep=""),sep = "\t",header = T);
file_1 = read.csv(paste(paste(wd,"/",sep = ""),args[2],sep = ""),sep = "\t",header = T);
print("Files read.")
file = as.matrix(file);
file_1 = as.matrix(file_1);
A = file[which(!duplicated(file[,1])),1]; # find non duplicated IDs in 1st column of the larger file
file=file[which(!duplicated(file[,1])),]; # leave only these rows
indices = c();
print("Identifying unique rows.")
for (i in seq(1, length(A),1)){
indices = append(indices,which(file_1[,1] == A[i])[1]) # which rows of the other file are these?
}
print("Unique rows identified.")
file_1 = file_1[indices,] # leave only these rows in smaller file
if(any(!(file_1[,1] == file[,1]))){
print("Mismatch encountered!");
stop()
}; # check for any mismatches
to_merge = file_1[,-1]; # leave first column (already in the larger file)
merged = cbind2(file, to_merge) # merge 'em
write.table(merged,file = paste(paste(wd,"/",sep = ""),args[3],sep=""),sep = "\t",row.names = F);
file_1[,1] == file[,1]
any(!(file_1[,1] == file[,1]))
(!(file_1[,1] == file[,1]))
any(!(file_1[,1] == file[,1]))
file_1[,1] == file[,1]
unique(file_1[,1] == file[,1])
which(is.na(file_1[,1] == file[,1]))
file[22707,1]
file_1[22707,1]
which(is.na(file_1[,1] == file[,1]))
print("Unique rows identified.")
file_1 = file_1[indices,] # leave only these rows in smaller file
indices
delete = which(is.na(file_1[,1] == file[,1]))
file_1[,1] = file_1[-delete,1]
file[,1] = file[-delete,1]
file_1[-delete,1]
file_1=file_1[-delete,1]
wd="/home/mstolarczyk/Uczelnia/MGR/praca_magisterska/nowe_dane/mappers_nowe_podejscie"
args = c("frog_1.txt" ,"frog_2.txt" ,"frog12.txt")
print("Reading files.")
file = read.csv(paste(paste(wd,"/",sep = ""),args[1],sep=""),sep = "\t",header = T);
file_1 = read.csv(paste(paste(wd,"/",sep = ""),args[2],sep = ""),sep = "\t",header = T);
print("Files read.")
file = as.matrix(file);
file_1 = as.matrix(file_1);
A = file[which(!duplicated(file[,1])),1]; # find non duplicated IDs in 1st column of the larger file
file=file[which(!duplicated(file[,1])),]; # leave only these rows
indices = c();
print("Identifying unique rows.")
for (i in seq(1, length(A),1)){
indices = append(indices,which(file_1[,1] == A[i])[1]) # which rows of the other file are these?
}
print("Unique rows identified.")
file_1 = file_1[indices,] # leave only these rows in smaller file
delete = which(is.na(file_1[,1] == file[,1]))
file_1 = file_1[-delete,1]
file = file[-delete,1]
if(any(!(file_1[,1] == file[,1]))){
print("Mismatch encountered!");
stop()
}; # check for any mismatches
to_merge = file_1[,-1]; # leave first column (already in the larger file)
merged = cbind2(file, to_merge) # merge 'em
write.table(merged,file = paste(paste(wd,"/",sep = ""),args[3],sep=""),sep = "\t",row.names = F);
dim(file)
size(file)
dim(file_1)
args = c("frog_1.txt" ,"frog_2.txt" ,"frog12.txt")
wd="/home/mstolarczyk/Uczelnia/MGR/praca_magisterska/nowe_dane/mappers_nowe_podejscie"
print("Reading files.")
file = read.csv(paste(paste(wd,"/",sep = ""),args[1],sep=""),sep = "\t",header = T);
file_1 = read.csv(paste(paste(wd,"/",sep = ""),args[2],sep = ""),sep = "\t",header = T);
print("Files read.")
file = as.matrix(file);
file_1 = as.matrix(file_1);
A = file[which(!duplicated(file[,1])),1]; # find non duplicated IDs in 1st column of the larger file
file=file[which(!duplicated(file[,1])),]; # leave only these rows
indices = c();
print("Identifying unique rows.")
for (i in seq(1, length(A),1)){
indices = append(indices,which(file_1[,1] == A[i])[1]) # which rows of the other file are these?
}
print("Unique rows identified.")
file_1 = file_1[indices,] # leave only these rows in smaller file
delete = which(is.na(file_1[,1] == file[,1]))
delete
file_1[-delete,1]
dim(file_1)
file_1[,1]
file_1[,2]
file_1[,3]
delete = which(is.na(file_1[,1] == file[,1]))
file_1 = file_1[-delete,]
file = file[-delete,]
if(any(!(file_1[,1] == file[,1]))){
print("Mismatch encountered!");
stop()
}; # check for any mismatches
to_merge = file_1[,-1]; # leave first column (already in the larger file)
merged = cbind2(file, to_merge) # merge 'em
write.table(merged,file = paste(paste(wd,"/",sep = ""),args[3],sep=""),sep = "\t",row.names = F);
wd
wd="/home/mstolarczyk/Uczelnia/MGR/praca_magisterska/nowe_dane/mappers_nowe_podejscie"
args = c("frog_12.txt" ,"frog_3.txt" ,"frog.txt")
print("Reading files.")
file = read.csv(paste(paste(wd,"/",sep = ""),args[1],sep=""),sep = "\t",header = T);
args = c("frog12.txt" ,"frog_3.txt" ,"frog.txt")
file = read.csv(paste(paste(wd,"/",sep = ""),args[1],sep=""),sep = "\t",header = T);
file_1 = read.csv(paste(paste(wd,"/",sep = ""),args[2],sep = ""),sep = "\t",header = T);
file = as.matrix(file);
file_1 = as.matrix(file_1);
A = file[which(!duplicated(file[,1])),1]; # find non duplicated IDs in 1st column of the larger file
file=file[which(!duplicated(file[,1])),]; # leave only these rows
indices = c();
print("Identifying unique rows.")
for (i in seq(1, length(A),1)){
indices = append(indices,which(file_1[,1] == A[i])[1]) # which rows of the other file are these?
}
print("Unique rows identified.")
file_1 = file_1[indices,] # leave only these rows in smaller file
delete = which(is.na(file_1[,1] == file[,1]))
file_1 = file_1[-delete,]
file = file[-delete,]
if(any(!(file_1[,1] == file[,1]))){
print("Mismatch encountered!");
stop()
}; # check for any mismatches
to_merge = file_1[,-1]; # leave first column (already in the larger file)
merged = cbind2(file, to_merge) # merge 'em
write.table(merged,file = paste(paste(wd,"/",sep = ""),args[3],sep=""),sep = "\t",row.names = F);
file[1,1]
file = read.csv(paste(paste(wd,"/",sep = ""),args[1],sep=""),sep = "\t",header = T);
file_1 = read.csv(paste(paste(wd,"/",sep = ""),args[2],sep = ""),sep = "\t",header = T);
file[1,1]
file_1[1,1]
file = as.matrix(file);
file_1 = as.matrix(file_1);
A = file[which(!duplicated(file[,1])),1]; # find non duplicated IDs in 1st column of the larger file
file=file[which(!duplicated(file[,1])),]; # leave only these rows
indices = c();
print("Identifying unique rows.")
for (i in seq(1, length(A),1)){
indices = append(indices,which(file_1[,1] == A[i])[1]) # which rows of the other file are these?
}
print("Unique rows identified.")
indices
file_1 = file_1[indices,] # leave only these rows in smaller file
delete = which(is.na(file_1[,1] == file[,1]))
delete
length(delete) == 0
if(!length(delete) == 0){
file_1 = file_1[-delete,]
file = file[-delete,]
}
if(any(!(file_1[,1] == file[,1]))){
print("Mismatch encountered!");
stop()
}; # check for any mismatches
to_merge = file_1[,-1]; # leave first column (already in the larger file)
merged = cbind2(file, to_merge) # merge 'em
write.table(merged,file = paste(paste(wd,"/",sep = ""),args[3],sep=""),sep = "\t",row.names = F);
wd = getwd()
wd
args=c("homo_sapiens_to_sigp_length_analysis.csv")
SPL=read.csv(args[1],sep=",",header = F);#Read csv file
wd = getwd()
.libPaths()
wd
args=c("homo_sapiens_to_sigp_length_analysis.csv")
SPL=read.csv(args[1],sep=",",header = F);#Read csv file
number_of_orgs = ((dim(SPL)[2])/3)
OoI_Ortho_LSAAR_length_diff =list()
OoI_Ortho_LSAAR_data =list()
OoI_Ortho_SP_length_diff =list()
OoI_Ortho_SP_data =list()
lengthened_indices=list()
correlations=list()
myNames = c()
for(i in seq(1,number_of_orgs,by = 1)){
test_index = which(as.vector(SPL[,(i*3-2)])!="NULL")[1]
if(is.na(test_index)){
test_index = "UNKNOWN"
}
myNames[i] = strsplit(as.character(SPL[test_index,(i*3-2)]),split = "0")[[1]][1]
}
for(org in seq(2,number_of_orgs,by = 1)){
OoI_Ortho_LSAAR_length_diff[[org]]= SPL[,3] - SPL[,org*3]; #length(homo sapiens LSAAR) - length(othologous LSAAR) -> positive number = LSAAR got longer -> negative number = LSAAR got shorter
OoI_Ortho_SP_length_diff[[org]]= SPL[,2] - SPL[,(org*3)-1]; #length(homo sapiens SP) - length(othologous SP) -> positive number = SP got longer -> negative number = SP got shorter
lengthened_indices[[org]] = which(OoI_Ortho_LSAAR_length_diff[[org]]>0)
OoI_Ortho_LSAAR_data[[org]]=OoI_Ortho_LSAAR_length_diff[[org]][lengthened_indices[[org]]]
OoI_Ortho_SP_data[[org]]=OoI_Ortho_SP_length_diff[[org]][lengthened_indices[[org]]]
correlations[[org]] = cor(OoI_Ortho_LSAAR_data[[org]],OoI_Ortho_SP_data[[org]],method = "pearson")
}
correlations[[1]] = "Not applicable"
names(correlations)=myNames
print("Pearson correlation values for lengthened SAARs and signal peptides for following organisms:")
print(correlations)
OoI_Ortho_LSAAR_data
OoI_Ortho_SP_data
OoI_Ortho_SP_data[[1]]
OoI_Ortho_SP_data[[2]]
plot(OoI_Ortho_SP_data[[2]],OoI_Ortho_SP_data[[2]])
OoI_Ortho_SP_length_diff
dim(SPL)
head(SPL)
head(SPL)
View(SPL)
plot(OoI_Ortho_LSAAR_data[[2]],OoI_Ortho_SP_data[[2]])
corr(OoI_Ortho_LSAAR_data[[2]],OoI_Ortho_SP_data[[2]])
cor(OoI_Ortho_LSAAR_data[[2]],OoI_Ortho_SP_data[[2]])
cor(OoI_Ortho_LSAAR_data[[3]],OoI_Ortho_SP_data[[3]])
plot(OoI_Ortho_LSAAR_data[[3]],OoI_Ortho_SP_data[[3]])
plot(OoI_Ortho_LSAAR_data[[4]],OoI_Ortho_SP_data[[4]])
cor(OoI_Ortho_LSAAR_data[[4]],OoI_Ortho_SP_data[[4]])
plot(OoI_Ortho_LSAAR_data[[5]],OoI_Ortho_SP_data[[5]])
cor(OoI_Ortho_LSAAR_data[[5]],OoI_Ortho_SP_data[[5]])
cor(OoI_Ortho_LSAAR_data[[6]],OoI_Ortho_SP_data[[6]])
plot(OoI_Ortho_LSAAR_data[[6]],OoI_Ortho_SP_data[[6]])
library(ggplot2)
qplot(OoI_Ortho_LSAAR_data[[6]],OoI_Ortho_SP_data[[6]])
ggplot(OoI_Ortho_LSAAR_data[[6]],OoI_Ortho_SP_data[[6]])
library(scales)
qplot(OoI_Ortho_LSAAR_data[[6]],OoI_Ortho_SP_data[[6]],col=alpha("black",0.5))
qplot(OoI_Ortho_LSAAR_data[[6]],OoI_Ortho_SP_data[[6]],colour=alpha("black",0.5),)
qplot(OoI_Ortho_LSAAR_data[[6]],OoI_Ortho_SP_data[[6]],colour=alpha('k',0.5))
qplot(OoI_Ortho_LSAAR_data[[6]],OoI_Ortho_SP_data[[6]],col=alpha('k',0.5))
data.frame(OoI_Ortho_LSAAR_data[[6]],OoI_Ortho_SP_data[[6]])
data.frame(OoI_Ortho_LSAAR_data[[6]],OoI_Ortho_SP_data[[6]])
a=data.frame(OoI_Ortho_LSAAR_data[[6]],OoI_Ortho_SP_data[[6]])
View(a)
a$OoI_Ortho_LSAAR_data..6..
a$OoI_Ortho_SP_data..6..
ggplot(a,mapping = aes(OoI_Ortho_LSAAR_data,OoI_Ortho_SP_data))
ggplot(a,mapping = aes(x=OoI_Ortho_LSAAR_data,y=OoI_Ortho_SP_data))
ggplot(a,mapping = aes(x=OoI_Ortho_SP_data..6..,y=OoI_Ortho_LSAAR_data..6..))
sp + geom_point()
sp = ggplot(a,mapping = aes(x=OoI_Ortho_SP_data..6..,y=OoI_Ortho_LSAAR_data..6..))
sp + geom_point()
sp + geom_point(alpha=.1)
sp + geom_point(alpha=.1)
sp + geom_point(alpha=.1,position = "jitter")
org=6
to_plot = data.frame(LSAAR = OoI_Ortho_LSAAR_data[[org]], SP = OoI_Ortho_SP_data[[org]])
ggplot(data = to_plot, mapping = aes(x = LSAAR,y = SP))
sp = ggplot(data = to_plot, mapping = aes(x = LSAAR,y = SP))
sp + geom_point(alpha=.1,position = "jitter")
OoI_Ortho_LSAAR_data[[org]]
.libPaths()
SPL[1,1]
SPL[1,3]
SPL[,3]
max(SPL[,3])
boxplot(SPL[,3])
args=c("homo_sapiens_to_sigp_length_analysis.csv")
wd = getwd()
.libPaths("/home/mstolarczyk/R/x86_64-pc-linux-gnu-library/3.4")
require(ggplot2)
require(scales)
SPL=read.csv(args[1],sep=",",header = F);#Read csv file
number_of_orgs = ((dim(SPL)[2])/3)
OoI_Ortho_LSAAR_length_diff =list()
OoI_Ortho_LSAAR_data =list()
OoI_Ortho_SP_length_diff =list()
OoI_Ortho_SP_data =list()
lengthened_indices=list()
correlations=list()
myNames = c()
for(i in seq(1,number_of_orgs,by = 1)){
test_index = which(as.vector(SPL[,(i*3-2)])!="NULL")[1]
if(is.na(test_index)){
test_index = "UNKNOWN"
}
myNames[i] = strsplit(as.character(SPL[test_index,(i*3-2)]),split = "0")[[1]][1]
}
for(org in seq(2,number_of_orgs,by = 1)){
OoI_Ortho_LSAAR_length_diff[[org]]= SPL[,3] - SPL[,org*3]; #length(homo sapiens LSAAR) - length(othologous LSAAR) -> positive number = LSAAR got longer -> negative number = LSAAR got shorter
OoI_Ortho_SP_length_diff[[org]]= SPL[,2] - SPL[,(org*3)-1]; #length(homo sapiens SP) - length(othologous SP) -> positive number = SP got longer -> negative number = SP got shorter
lengthened_indices[[org]] = which(OoI_Ortho_LSAAR_length_diff[[org]]>0)
OoI_Ortho_LSAAR_data[[org]]=OoI_Ortho_LSAAR_length_diff[[org]][lengthened_indices[[org]]]
OoI_Ortho_SP_data[[org]]=OoI_Ortho_SP_length_diff[[org]][lengthened_indices[[org]]]
correlations[[org]] = cor(OoI_Ortho_LSAAR_data[[org]],OoI_Ortho_SP_data[[org]],method = "pearson")
to_plot = data.frame(LSAAR = OoI_Ortho_LSAAR_data[[org]], SP = OoI_Ortho_SP_data[[org]])
sp = ggplot(data = to_plot, mapping = aes(x = LSAAR,y = SP))
sp + geom_point(alpha=.1,position = "jitter")
}
correlations[[1]] = "Not applicable"
names(correlations)=myNames
print("Pearson correlation values for lengthened SAARs and signal peptides for following organisms:")
print(correlations)
to_plot = data.frame(LSAAR = OoI_Ortho_LSAAR_data[[2]], SP = OoI_Ortho_SP_data[[2]])
sp = ggplot(data = to_plot, mapping = aes(x = LSAAR,y = SP))
sp + geom_point(alpha=.1,position = "jitter")
sp = ggplot(data = to_plot, mapping = aes(x = LSAAR,y = SP))
sp + geom_point(alpha=.1,position = "jitter")
sp + ggtitle(paste("Scatterplot of L-SAAR length differences and SP length differences\n", myNames[[1]]," vs.", myNames[org] ))
sp + ggtitle(paste("Scatterplot of L-SAAR length differences and SP length differences\n", "of",myNames[[1]]," vs.", myNames[org] ))
sp + ggtitle(paste("Scatterplot of L-SAAR length differences and SP length differences\n", "of",myNames[[1]]," vs.", myNames[org] )) + theme(plot.title = element_text(hjust = 0.5))
sp = ggplot(data = to_plot, mapping = aes(x = LSAAR,y = SP))
sp + geom_point(alpha=.1,position = "jitter")
sp + ggtitle(paste("Scatterplot of L-SAAR length differences and SP length differences\n", "of",myNames[[1]]," vs.", myNames[org] )) + theme(plot.title = element_text(hjust = 0.5))
sp + geom_point(alpha=.1,position = "jitter")
sp = ggplot(data = to_plot, mapping = aes(x = LSAAR,y = SP))
sp + geom_point(alpha=.1,position = "jitter")
sp + ggtitle(paste("Scatterplot of L-SAAR length differences and SP length differences\n", "of",myNames[[1]]," vs.", myNames[org] )) + theme(plot.title = element_text(hjust = 0.5))
sp = ggplot(data = to_plot, mapping = aes(x = LSAAR,y = SP)) + geom_point(alpha=.1,position = "jitter") + ggtitle(paste("Scatterplot of L-SAAR length differences and SP length differences\n", "of",myNames[[1]]," vs.", myNames[org] )) + theme(plot.title = element_text(hjust = 0.5))
to_plot = data.frame(LSAAR = OoI_Ortho_LSAAR_data[[org]], SP = OoI_Ortho_SP_data[[org]])
sp = ggplot(data = to_plot, mapping = aes(x = LSAAR,y = SP)) + geom_point(alpha=.1,position = "jitter") + ggtitle(paste("Scatterplot of L-SAAR length differences and SP length differences\n", "of",myNames[[1]]," vs.", myNames[org] )) + theme(plot.title = element_text(hjust = 0.5))
sp + geom_point(alpha=.1,position = "jitter") + ggtitle(paste("Scatterplot of L-SAAR length differences and SP length differences\n", "of",myNames[[1]]," vs.", myNames[org] )) + theme(plot.title = element_text(hjust = 0.5))
sp = ggplot(data = to_plot, mapping = aes(x = LSAAR,y = SP))
sp + geom_point(alpha=.5,position = "jitter") + ggtitle(paste("Scatterplot of L-SAAR length differences and SP length differences\n", "of",myNames[[1]]," vs.", myNames[org] )) + theme(plot.title = element_text(hjust = 0.5))
ggsave(file="test.svg", plot=sp, width=10, height=8)
install.packages("svglite")
install.packages("gdtools")
install.packages("cairo")
install.packages("Cairo")
.libPaths()
install.packages(c("igraph", "Rcpp", "sybil"))
install.packages(c("igraph", "Rcpp", "sybil"))
install.packages(c("igraph", "Rcpp", "sybil"))
install.packages(c("igraph", "Rcpp", "sybil"))
install.packages(c("igraph", "Rcpp", "sybil"))
install.packages(c("igraph", "Rcpp", "sybil"))
install.packages(c("igraph", "Rcpp", "sybil"))
install.packages(c("igraph", "Rcpp", "sybil"))
install.packages("svglite",dependencies = T)
library(svglite)
library("svglite")
installed.packages("gdtools",dependencies = T)
installed.packages("gdtools",dependancies = T)
installed.packages("gdtools")
installed.packages("gdtools")
install.packages("gdtools",dependancies = T)
install.packages("gdtools",dependencies = T)
install.packages("gdtools",dependencies = T)
library("svglite")
install.packages("svglite",dependencies = T)
library("svglite")
sp = ggplot(data = to_plot, mapping = aes(x = LSAAR,y = SP))
sp = ggplot(data = to_plot, mapping = aes(x = LSAAR,y = SP))
sp + geom_point(alpha=.5,position = "jitter") + ggtitle(paste("Scatterplot of L-SAAR length differences and SP length differences\n", "of",myNames[[1]]," vs.", myNames[org] )) + theme(plot.title = element_text(hjust = 0.5))
ggsave(file="test.svg", plot=sp, width=10, height=8)
library(svglite)
ggsave(file="test.svg", plot=sp, width=10, height=8)
library(ggplot2)
ggsave(file="test.svg", plot=sp, width=10, height=8)
wd
ggsave(file=paste(wd,sep = "/","test.svg", plot=sp, width=10, height=8)
)
ggsave(file=paste(wd,sep = "/","test.svg"), plot=sp, width=10, height=8)
ggsave(file="test.svg", plot=finale, width=10, height=8)
finale = sp + geom_point(alpha=.5,position = "jitter") + ggtitle(paste("Scatterplot of L-SAAR length differences and SP length differences\n", "of",myNames[[1]]," vs.", myNames[org] )) + theme(plot.title = element_text(hjust = 0.5))
ggsave(file="test.svg", plot=finale, width=10, height=8)
sp = ggplot(data = to_plot, mapping = aes(x = LSAAR,y = SP))
finale = sp + geom_point(alpha=.5,position = "jitter") + ggtitle(paste("Scatterplot of L-SAAR length differences and SP length differences\n", "of",myNames[[1]]," vs.", myNames[org] )) + theme(plot.title = element_text(hjust = 0.5))
ggsave(file="test.svg", plot=finale, width=6, height=6)
sp = ggplot(data = to_plot, mapping = aes(x = LSAAR,y = SP))
finale = sp + geom_point(alpha=.5,position = "jitter") + ggtitle(paste("Scatterplot of L-SAAR length differences and SP length differences\n",myNames[[1]]," vs.", myNames[org] )) + theme(plot.title = element_text(hjust = 0.5))
ggsave(file="test.svg", plot=finale, width=6, height=6)
sp = ggplot(data = to_plot, mapping = aes(x = LSAAR,y = SP))
finale = sp + geom_point(alpha=.5,position = "jitter") + ggtitle(paste("Scatterplot of L-SAAR length differences and SP length differences\n",myNames[[1]]," vs.", myNames[org] )) + theme(plot.title = element_text(hjust = 0.5))
ggsave(file="test.svg", plot=finale, width=6, height=4)
ggsave(file="test.svg", plot=finale, width=5, height=5)
wd
sp = ggplot(data = to_plot, mapping = aes(x = LSAAR,y = SP))
finale = sp + geom_point(alpha=.5,position = "jitter") + ggtitle(paste("Scatterplot of L-SAAR length differences and SP length differences\n",myNames[[1]]," vs.", myNames[org] )) + theme(plot.title = element_text(hjust = 0.5))
ggsave(file=paste(sep="",wd,"/",myNames[1],"_",myNames[[org]],"scatterplot.svg"), plot=finale, width=5, height=5)
finale = sp + geom_point(alpha=.5,position = "jitter") + ggtitle(paste("Scatterplot of L-SAAR length differences and SP length differences\n",myNames[[1]]," vs.", myNames[org] )) + theme(plot.title = element_text(hjust = 0.5))
ggsave(file=paste(sep="",wd,"/",myNames[1],"_",myNames[[org]],"_scatterplot.svg"), plot=finale, width=5, height=5)
ggsave(file=paste(sep="",wd,"/",myNames[1],"_",myNames[[org]],"_scatterplot.svg"), plot=finale, width=10, height=10)
dir.create(path = paste(wd,sep = "/","length_analysis_plots")
)
dir.create(path = paste(wd,sep = "/","length_analysis_plots"))
dir.exists(path = paste(wd,sep = "/","length_analysis_plots"))
