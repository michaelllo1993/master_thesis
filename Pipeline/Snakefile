wildcard_constraints:
    sample="\w+\_{1}\w+"

configfile: "config.yaml"

#Data preparation

def orderOrganisms(wildcards):
    orgs = sorted(config["organisms"])
    orgs.remove(wildcards.sample)
    orgs.insert(0,wildcards.sample)
    return orgs


rule make_ENS_IDs_dict:
    input:
        files=expand("data/proteinSequences/{organism}.txt",organism=config["organisms"])
    output:
        "ENS_IDs_dict_for_{sample}.csv"
    run:
        import csv
        codes={}
        orgs = sorted(config["organisms"])
        orgs.remove(wildcards.sample)
        orgs.insert(0,wildcards.sample)
        with open(output[0], 'w') as f:
            w = csv.writer(f)
            for org in orgs:
                f=open("data/proteinSequences/"+org+".txt","r")
                line=f.readline()
                codes[org] = re.match(r">([A-Z]+)([0-9]+)",line).groups()[0]
                w.writerow([org]+[codes[org]])

rule create_ensembl_ids_mapper:
    input:
        ortho_dataset="data/orthoMappers/{sample}.tsv"
    params:
        organisms=orderOrganisms
    output:
        "data/orthoMappers/{sample}_ids_mapper.csv"
    shell:
        "mkdir -p data/orthoMappers; perl scripts/5create_ens_ids_mapper.pl {input} {params.organisms} > {output}"

def selectFile(wildcards):
    if config["region"] == "SP":
        selectedFile = "results/SP/extracted_sigp_" + wildcards.sample + ".out"
    elif config["region"] == "WHOLE":
        selectedFile = "results/needle/" + wildcards.sample + "_wholeSequence.out"
    else:
        selectedFile = 0
        print("Wrong region selected. Use 'SP' or 'WHOLE'!")
    return selectedFile

def selectNeedleInput(wildcards):
    if config["region"] == "SP":
        selectedNeedleInput = expand("results/SP/ensembl_parsed_{organism}.txt", organism=config["organisms"])
    elif config["region"] == "WHOLE":
        selectedNeedleInput = expand("data/proteinSequences/{organism}.txt", organism=config["organisms"])
    else:
        selectedNeedleInput = 0
        print("Wrong region selected. Specify 'SP' or 'WHOLE' in the config file!")
    return selectedNeedleInput

rule prepare_cDNA_sequences:
    input:
        "data/cDNAsequences/{sample}_cDNA.txt"
    output:
        "data/cDNAsequences/{sample}_cDNA.csv"
    shell:
        "perl scripts/seq2csv_cDNA.pl {input}"

rule prepare_protein_sequences:
    input:
        "data/proteinSequences/{sample}.txt"
    output:
        "data/proteinSequences/{sample}.csv"
    shell:
        "perl scripts/seq2csv.pl {input}"

rule build_protein_cDNA_mapper:
    input:
        "data/proteinSequences/{sample}.txt"
    output:
        "data/mappers/{sample}_mapper.csv"
    shell:
        "perl scripts/build_protein_cDNA_mapper.pl {input}"

if config["downloadInputData"] == "NO":
    rule read_input_RData:
        input:
            expand("data/cDNAsequences/{organism}_cDNA.csv", organism=config["organisms"]),
            expand("data/mappers/{organism}_mapper.csv", organism=config["organisms"]),
            expand("data/proteinSequences/{organism}.csv", organism=config["organisms"])
        output:
            directory="data/readData",
            data_cDNA="data/readData/readData_cDNA.rds",
            data_proteins="data/readData/readData_proteins.rds",
            data_mapper="data/readData/readData_mapper.rds"
        shell:
            "mkdir -p {output.directory}; Rscript scripts/readData_input.R"

rule read_other_RData:
    input:
        expand("results/SP/extracted_sigp_{organism}.out", organism=config["organisms"]),
        expand("results/SP/{organism}_signalp_positives.out", organism=config["organisms"])
    output:
        directory="data/readData",
        data_SAAR="data/readData/readData_SAAR.rds",
	data_SP="data/readData/readData_SP.rds"
    shell:
        "mkdir -p {output.directory}; Rscript scripts/readData_other.R"

if config["downloadInputData"] == "YES":
    rule download_sequence_data:
        params:
            organism="{sample}",
            organisms=orderOrganisms
        output:
            data_cDNA="data/readData/readData_cDNA_{sample}.rds",
            data_proteins="data/readData/readData_proteins_{sample}.rds",
            data_fasta_proteins="data/proteinSequences/{sample}.txt",
            data_fasta_cDNA="data/cDNAsequences/{sample}_cDNA.txt",
            data_mapper="data/orthoMappers/{sample}.tsv"
        run:
            shell("mkdir -p data/readData"),
            shell("Rscript scripts/download_mapper_biomart.R {params.organisms}"),
            shell("Rscript scripts/download_sequences_biomart.R {params.organism}")

rule prep_and_run_signalp:
    input:
        proteinSequences="data/proteinSequences/{organism}.txt"
    output:
        sigpResults="results/SP/{organism}_sigp.out",
        parsedProteinSequences="results/SP/ensembl_parsed_{organism}.txt"
    shell:
        "mkdir -p results/SP; perl scripts/1prep_and_run_signalp.pl {input.proteinSequences} > {output.sigpResults}"

rule analyze_signalp:
    input:
        sigpResults="results/SP/{organism}_sigp.out"
    output:
        sigpPositives="results/SP/{organism}_signalp_positives.out"
    shell:
        "mkdir -p results/SP; perl scripts/2analyze_signalp.pl {input} > {output}"

rule extract_signalp:
    input:
        sigpPositives="results/SP/{organism}_signalp_positives.out",
        parsedProteinSequences="results/SP/ensembl_parsed_{organism}.txt"
    params:
        repeatUnit=config["repeatUnit"],
        repeatThreshold=config["repeatThreshold"]
    output:
        extractedSigp="results/SP/extracted_sigp_{organism}.out"
    shell:
        "mkdir -p results/SP; perl scripts/3extract_signalp.pl {input.sigpPositives} {input.parsedProteinSequences} {params.repeatUnit} {params.repeatThreshold} > {output}"


rule prep_data_for_wholeseq_needle:
    input:
        "data/proteinSequences/{sample}.txt"
    output:
        "results/needle/{sample}_wholeSequence.out"
    shell:
        "mkdir -p results/needle; perl scripts/4prep_needle.pl {input} > {output}"



rule run_needle:
    input:
        sequenceFile=selectFile,
        mapper="data/orthoMappers/{sample}_ids_mapper.csv",
        codes_mapper="ENS_IDs_dict_for_{sample}.csv",
        parsedProteinSequences=selectNeedleInput
    params:
        organisms=orderOrganisms,
        region=config["region"]
    output:
        "results/needle/{sample}.needle_out"
    shell:
        "mkdir -p results/needle; perl scripts/6needle_wrapper.pl {input.sequenceFile} {input.mapper} {input.codes_mapper} {params.region} {params.organisms}  > {output}"

rule merge_all_extracted_sigps:
    input:
        expand("results/SP/extracted_sigp_{organism}.out", organism=config["organisms"])
    output:
        "results/SP/extracted_sigp_all.out"
    shell:
        "mkdir -p results/SP; cat {input} >> {output}"

rule prep_sigp_length_analysis:
    input:
        "results/SP/extracted_sigp_all.out",
        "data/orthoMappers/{sample}_ids_mapper.csv"
    params:
        organisms=orderOrganisms
    output:
        "results/SP/{sample}_to_sigp_length_analysis.csv"
    shell:
        "mkdir -p results/SP; perl scripts/7prep_length_analysis.pl {input} {params.organisms} > {output}"

rule sigp_length_analysis:
    input:
        "results/SP/{sample}_to_sigp_length_analysis.csv"
    output:
        "results/SP/{sample}_sigp_length_analysis.out"
    shell:
        "mkdir -p results/SP; Rscript scripts/8sigp_saar_length_analysis.R {input} > {output}"

rule prep_seq_comp:
    input:
        "results/needle/{sample}.needle_out",
        "data/orthoMappers/{sample}_ids_mapper.csv"
    params:
        organisms=orderOrganisms
    output:
        "results/sequenceComparison/{sample}_prepared_sequence_comparison.csv"
    shell:
        "perl scripts/9prepare_sequence_comparison.pl {input} {params.organisms} > {output}"

rule sequence_comp:
    input:
        "results/sequenceComparison/{sample}_prepared_sequence_comparison.csv"
    params:
        repeatUnit=config["repeatUnit"]
    output:
        "results/sequenceComparison/{sample}_orthoAAstats"
    shell:
        "mkdir -p {output}; Rscript scripts/10sequence_comparison.R {input} {params.repeatUnit}"



rule count_repeat_unit_codons:
    input:
        mapper="data/orthoMappers/{sample}_ids_mapper.csv",
        data_cDNA=expand("data/readData/readData_cDNA_{organism}.rds",organism=config["organisms"]),
        data_SP="data/readData/readData_SP.rds",
        data_SAAR="data/readData/readData_SAAR.rds"
    params:
        repeatUnit=config["repeatUnit"],
        organisms=orderOrganisms
    output:
        directory="results/codon_frequency/{sample}_orthologues",
        mapper="data/orthoMappers/{sample}_ids_mapper_common.csv"
    shell:
        "mkdir -p {output.directory}; Rscript scripts/count_codons.R {input.mapper} {params.repeatUnit} {params.organisms}"

rule analyze_region_codon_frequencies:
    input:
        "results/codon_frequency/{sample}_orthologues"
    params:
        organism_of_interest="{sample}",
        repeatUnit=config["repeatUnit"]
    output:
        "results/codon_frequency/{sample}_orthologues/codon_frequency_plots_{sample}_orthologues"
    shell:
        "mkdir -p {output}; Rscript scripts/region_codon_frequencies.R {params.organism_of_interest} {params.repeatUnit}"

rule prepare_revtrans:
    input:
        data_cDNA=expand("data/readData/readData_cDNA_{organism}.rds",organism=config["organisms"])
    params:
        orgs=orderOrganisms
    output:
        "results/revtrans"
    shell:
        "mkdir -p {output}; Rscript scripts/prep2revtrans.R {params.orgs}"

rule run_revtrans:
    input:
        files_protein = "results/sequenceComparison/{sample}_prepared_sequence_comparison.csv",
        files_cDNA=expand("results/revtrans/prep2revtrans_full_{organism}.csv", organism=config["organisms"])
    params:
        organism="{sample}",
        organism_code="ENSBTAP"
    output:
        "results/revtrans/{sample}_revtrans.csv"
    shell:
        "perl scripts/run_revtrans.pl {params.organism} {params.organism_code} {input}"

rule analyze_codon_changes_within_repeatUnit:
    input:
        revtrans_file="results/revtrans/{sample}_revtrans.csv",
        codes_dict="ENS_IDs_dict_for_{sample}.csv"
    params:
        organism_of_interest="{sample}",
        repeatUnit=config["repeatUnit"]
    output:
        "results/revtrans/{sample}_changes_within_repeatUnit"
    shell:
        "mkdir -p {output}; Rscript scripts/codon_changes_within_repeat_unit.R {input.revtrans_file} {input.codes_dict} {params.organism_of_interest} {params.repeatUnit}"

def organismsNoSampleExpand(wildcards):
    orgs = sorted(config["organisms"])
    orgs.remove(wildcards.sample)
    str1 = expand("results/revtrans/{sampl}_changes_within_repeatUnit/codon_changes_within_repeat_unit_{organism}.csv",organism=orgs,sampl=wildcards.sample)
    str2 = expand("results/revtrans/{sampl}_changes_within_repeatUnit/codon_changes_within_SAAR_{organism}.csv",organism=orgs,sampl=wildcards.sample)
    str3 = expand("results/revtrans/{sampl}_changes_within_repeatUnit/codon_changes_within_repeatUnitNoSAAR_{organism}.csv",organism=orgs,sampl=wildcards.sample)
    organisms = str1 + str2 + str3
    return organisms

rule visualize_codon_changes_within_repeatUnit:
    input:
        files = organismsNoSampleExpand
    params:
        repeatUnit=config["repeatUnit"],
        organism_of_interest="{sample}"
    output:
        "results/revtrans/{sample}_changes_within_repeatUnit/visualization_{sample}"
    shell:
        "mkdir -p {output}; Rscript scripts/visualize_within_repeat_unit_codon_changes.R {input.files} {params.organism_of_interest} {params.repeatUnit}"

rule calculate_mean_pairwise_evolutionary_distances:
    input:
        data_proteins="data/readData/readData_proteins.rds",
        mapper_common="data/orthoMappers/{sample}_ids_mapper_common.csv",
    params:
        organism_of_interest="{sample}",
        algorithm = config["MSAalgorithm"],
        no_sequences = config["MSAseqNumber"]
    output:
        "results/{sample}_mean_pairwise_evolutionary_distances.csv"
    shell:
        "Rscript scripts/calculate_mean_evolutionary_distances.R {params.organism_of_interest} {params.algorithm} {params.no_sequences}"
