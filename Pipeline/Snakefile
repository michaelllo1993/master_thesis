configfile: "config.yaml"

rule prep_and_run_signalp:
    input:
        proteinSequences="{organism}.txt"
    output:
        sigpResults="{organism}_sigp.out",
        parsedProteinSequences="ensembl_parsed_{organism}.txt"
    shell:
        "perl 1prep_and_run_signalp.pl {input.proteinSequences} > {output.sigpResults}"

rule analyze_signalp:
    input:
        sigpResults="{organism}_sigp.out"
    output:
        sigpPositives="{organism}_signalp_positives.out"
    shell:
        "perl 2analyze_signalp.pl {input} > {output}"

rule extract_signalp:
    input:
        sigpPositives="{organism}_signalp_positives.out",
        parsedProteinSequences="ensembl_parsed_{organism}.txt",
    params:
        repeatUnit=config["repeatUnit"],
        repeatThreshold=config["repeatThreshold"]
    output:
        extractedSigp="extracted_sigp_{organism}.out"
    shell:
        "perl 3extract_signalp.pl {input.sigpPositives} {input.parsedProteinSequences} {params.repeatUnit} {params.repeatThreshold} > {output}"


rule prep_data_for_wholeseq_needle:
    input:
        "{sample}.txt"
    output:
        "{sample}_wholeSequence.out"
    shell:
        "perl 4prep_needle.pl {input} > {output}"

def orderOrganisms(wildcards):
    orgs = sorted(config["organisms"])
    orgs.remove(wildcards.sample)
    orgs.insert(0,wildcards.sample)
    return orgs

rule make_ENS_IDs_dict:
    output:
        "ENS_IDs_dict_for_{sample}.csv"
    run:
        import csv
        codes={}
        for org in config["organisms"]:
            f=open(org+".txt","r")
            line=f.readline()
            codes[org] = re.match(r">([A-Z]+)([0-9]+)",line).groups()[0]
        with open(output[0], 'w') as f:
            w = csv.writer(f)
            w.writerow(codes.keys())
            w.writerow(codes.values())

rule create_ensembl_ids_mapper:
    input:
        ortho_dataset="{sample}.tsv"
    params:
        organisms=orderOrganisms
    output:
        "{sample}_ids_mapper.csv"
    wildcard_constraints:
        sample="\w+\_\w+"
    shell:
        "perl 5create_ens_ids_mapper.pl {input} {params.organisms} > {output}"

def selectFile(wildcards):
    if config["region"] == "SP":
        selectedFile = "extracted_sigp_" + wildcards.sample + ".out"
    elif config["region"] == "WHOLE":
        selectedFile = wildcards.sample + "_wholeSequence.out"
    else:
        selectedFile = 0
        print("Wrong region selected. Use 'SP' or 'WHOLE'!")
    return selectedFile

def selectNeedleInput(wildcards):
    if config["region"] == "SP":
        selectedNeedleInput = expand("ensembl_parsed_{organism}.txt", organism=config["organisms"])
    elif config["region"] == "WHOLE":
        selectedNeedleInput = expand("{organism}.txt", organism=config["organisms"])
    else:
        selectedNeedleInput = 0
        print("Wrong region selected. Use 'SP' or 'WHOLE'!")
    return selectedNeedleInput


rule run_needle:
    input:
        sequenceFile=selectFile,
        mapper="{sample}_ids_mapper.csv",
        parsedProteinSequences=selectNeedleInput
    params:
        organisms=orderOrganisms,
        region=config["region"]
    output:
        "{sample}.needle_out"
    shell:
        "perl 6needle_wrapper.pl {input.sequenceFile} {input.mapper} {params.region} {params.organisms}  > {output}"

rule merge_all_extracted_sigps:
    input:
        expand("extracted_sigp_{organism}.out", organism=config["organisms"])
    output:
        expand("extracted_sigp_{organism}.out", organism=config["organisms"]),
        "extracted_sigp_all.out"
    shell:
        "cat {input} >> {output}"

rule prep_sigp_length_analysis:
    input:
        "extracted_sigp_all.out",
        "{sample}_ids_mapper.csv"
    params:
        organisms=orderOrganisms
    output:
        "{sample}_to_sigp_length_analysis.csv"
    shell:
        "perl 7prep_length_analysis.pl {input} {params.organisms} > {output}"

rule sigp_length_analysis:
	input:
		"{sample}_to_sigp_length_analysis.csv"
	output:
		"{sample}_sigp_length_analysis.out"
	shell:
		"Rscript 8sigp_saar_length_analysis.R {input} > {output}"

rule prep_seq_comp:
    input:
        "{sample}.needle_out",
        "{sample}_ids_mapper.csv"
    params:
        organisms=orderOrganisms
    output:
        "{sample}_prepared_sequence_comparison.csv"
    shell:
        "perl 9prepare_sequence_comparison.pl {input} {params.organisms} > {output}"

rule sequence_comp:
    input:
        "{sample}_prepared_sequence_comparison.csv"
    params:
        repeatUnit=config["repeatUnit"]
    output:
        "{sample}_orthoAAstats"
    shell:
        "mkdir -p {output}; Rscript 10sequence_comparison.R {input} {params.repeatUnit}"

rule prepare_cDNA_sequences:
    input:
        "data/cDNAsequences/{sample}_cDNA.txt"
    output:
        "data/cDNAsequences/{sample}_cDNA.csv"
    shell:
        "perl scripts/seq2csv_cDNA.pl {input}"

rule prepare_protein_sequences:
    input:
        "data/proteinSequences/{sample}.txt"
    output:
        "data/proteinSequences/{sample}.csv"
    shell:
        "perl scripts/seq2csv.pl {input}"

rule build_protein_cDNA_mapper:
    input:
        "data/proteinSequences/{sample}.txt"
    output:
        "data/mappers/{sample}_mapper.csv"
    shell:
        "perl scripts/build_protein_cDNA_mapper.pl {input}"

rule read_RData:
    input:
        expand("data/cDNAsequences/{organism}_cDNA.csv", organism=config["organisms"]),
        expand("data/mappers/{organism}_mapper.csv", organism=config["organisms"]),
        expand("data/proteinSequences/{organism}.csv", organism=config["organisms"]),
        expand("extracted_sigp_{organism}.out", organism=config["organisms"]),
        expand("{organism}_signalp_positives.out", organism=config["organisms"])
    output:
        "data/readData"
    shell:
        "mkdir -p {output}; Rscript scripts/readData.R"

rule count_repeat_unit_codons:
    input:
        mapper="{sample}_ids_mapper.csv",
        data_cDNA="data/readData/readData_cDNA.rds",
        data_SP="data/readData/readData_SP.rds",
        data_SAAR="data/readData/readData_SAAR.rds"
    params:
        repeatUnit = config["repeatUnit"],
        organisms = orderOrganisms
    output:
        "codon_frequency/{sample}_orthologues"
    shell:
        "mkdir -p {output}; Rscript scripts/count_codons.R {input.mapper} {params.repeatUnit} {params.organisms}"

rule analyze_region_codon_frequencies:
    input:
        "codon_frequency/{sample}_orthologues"
    params:
        organism_of_interest = "{sample}",
        repeatUnit = config["repeatUnit"]
    output:
        "codon_frequency/{sample}_orthologues/codon_frequency_plots_{sample}_orthologues"
    shell:
        "mkdir -p {output}; Rscript scripts/region_codon_frequencies.R {params.organism_of_interest} {params.repeatUnit}"

rule prepare_revtrans:
    input:
        data_cDNA="data/readData/readData_cDNA.rds"
    output:
        "revtrans_ready"
    shell:
        "mkdir -p {output}; Rscript scripts/prep2revtrans.R"

rule run_revtrans:
    input:
        files_protein = "{sample}_prepared_sequence_comparison.csv",
        files_cDNA=expand("revtrans_ready/prep2revtrans_full_{organism}.csv", organism=config["organisms"])
    params:
        organism="{sample}",
        organism_code="ENSBTAP"
    output:
        "{sample}_revtrans.csv"
    shell:
        "perl scripts/run_revtrans.pl {params.organism} {params.organism_code} {input}"

rule analyze_codon_changes_within_repeatUnit:
    input:
        revtrans_file="{sample}_revtrans.csv",
        codes_dict="ENS_IDs_dict_for_{sample}.csv"
    params:
        organism_of_interest="{sample}",
        repeatUnit=config["repeatUnit"]
    output:
        "{sample}_changes_within_repeatUnit"
    shell:
        "mkdir -p {output}; Rscript scripts/codon_changes_within_repeat_unit.R {input.revtrans_file} {input.codes_dict} {params.organism_of_interest} {params.repeatUnit}"

def organismsNoSampleExpand(wildcards):
    orgs = sorted(config["organisms"])
    orgs.remove(wildcards.sample)
    str1 = expand("{sampl}_changes_within_repeatUnit/codon_changes_within_repeat_unit_{organism}.csv",organism=orgs,sampl=wildcards.sample)
    str2 = expand("{sampl}_changes_within_repeatUnit/codon_changes_within_SAAR_{organism}.csv",organism=orgs,sampl=wildcards.sample)
    # str3 = expand("{sample}_changes_within_repeatUnit/codon_changes_within_repeatUnitNoSAAR_{organism}.csv",organism=orgs,sample="{sample}")
    organisms = str1 + str2#+ str3
    return organisms

rule visualize_codon_changes_within_repeatUnit:
    input:
        files = organismsNoSampleExpand
    params:
        repeatUnit=config["repeatUnit"],
        organism_of_interest="{sample}"
    output:
        "{sample}_changes_within_repeatUnit/visualization_{sample}"
    shell:
        "mkdir -p {output}; Rscript scripts/visualize_within_repeat_unit_codon_changes.R {input.files} {params.organism_of_interest} {params.repeatUnit}"
