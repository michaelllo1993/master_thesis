configfile: "config.yaml"
rule prep_and_run_signalp:
    input:
        proteinSequences="{organism}.txt"
    output:
        sigpResults="{organism}_sigp.out",
        parsedProteinSequences="ensembl_parsed_{organism}.txt"
    shell:
        "perl 1prep_and_run_signalp.pl {input.proteinSequences} > {output.sigpResults}"

rule analyze_signalp:
    input:
        sigpResults="{organism}_sigp.out"
    output:
        sigpPositives="{organism}_signalp_positives.out"
    shell:
        "perl 2analyze_signalp.pl {input} > {output}"

rule extract_signalp:
    input:
        sigpPositives="{organism}_signalp_positives.out",
        parsedProteinSequences="ensembl_parsed_{organism}.txt",
    params:
        repeatUnit=config["repeatUnit"],
        repeatThreshold=config["repeatThreshold"]
    output:
        extractedSigp="extracted_sigp_{organism}.out"
    shell:
        "perl 3extract_signalp.pl {input.sigpPositives} {input.parsedProteinSequences} {params.repeatUnit} {params.repeatThreshold} > {output}"


rule prep_data_for_wholeseq_needle:
    input:
        "{sample}.txt"
    output:
        "{sample}_wholeSequence.out"
    shell:
        "perl 4prep_needle.pl {input} > {output}"

def orderOrganisms(wildcards):
    orgs = sorted(config["organisms"])
    orgs.remove(wildcards.sample)
    orgs.insert(0,wildcards.sample)
    return orgs

rule create_ensembl_ids_mapper:
    input:
        ortho_dataset="{sample}.tsv"
    params:
        organisms=orderOrganisms
    output:
        "{sample}_ids_mapper.csv"
    wildcard_constraints:
        sample="\w+\_\w+"
    shell:
        "perl 5create_ens_ids_mapper.pl {input} {params.organisms} > {output}"

def selectFile(wildcards):
    if config["region"] == "SP":
        selectedFile = "extracted_sigp_" + wildcards.sample + ".out"
    elif config["region"] == "WHOLE":
        selectedFile = wildcards.sample + "_wholeSequence.out"
    else:
        selectedFile = 0
        print("Wrong region selected. Use 'SP' or 'WHOLE'!")
    return selectedFile

rule run_needle:
    input:
        sequenceFile=selectFile,
        mapper="{sample}_ids_mapper.csv",
        parsedProteinSequences=expand("ensembl_parsed_{organism}.txt", organism=config["organisms"])
    params:
        organisms=orderOrganisms,
        region=config["region"]
    output:
        "{sample}.needle_out"
    shell:
        "perl 6needle_wrapper.pl {input.sequenceFile} {input.mapper} {params.region} {params.organisms}  > {output}"

rule merge_all_extracted_sigps:
    input:
        expand("extracted_sigp_{organism}.out", organism=config["organisms"])
    output:
        "extracted_sigp_all.out"
    shell:
        "cat {input} >> {output}"

rule prep_sigp_length_analysis:
    input:
        "extracted_sigp_all.out",
        "{sample}_ids_mapper.csv"
    params:
        organisms=orderOrganisms
    output:
        "{sample}_to_sigp_length_analysis.csv"
    shell:
        "perl 7prep_length_analysis.pl {input} {params.organisms} > {output}"

rule sigp_length_analysis:
	input:
		"{sample}_to_sigp_length_analysis.csv"
	output:
		"{sample}_sigp_length_analysis.out"
	shell:
		"Rscript 8sigp_saar_length_analysis.R {input} > {output}"

rule prep_seq_comp:
    input:
        "{sample}.needle_out",
        "{sample}_ids_mapper.csv"
    params:
        organisms=orderOrganisms
    output:
        "{sample}_prepared_sequence_comparison.csv"
    shell:
        "perl 9prepare_sequence_comparison.pl {input} {params.organisms} > {output}"

rule sequence_comp:
    input:
        "{sample}_prepared_sequence_comparison.csv",
    output:
        "{sample}_amino_acids_on_test_position_vs_test.out"
    wildcard_constraints:
        sample="\w+\_\w+",
        ortho="\w+",
        saar="\w{1}"
    shell:
        "Rscript 10sequence_comparison.R {input} > {output}"
